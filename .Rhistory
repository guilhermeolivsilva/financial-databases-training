# TIPOS DE DADOS
# logical
a = TRUE
b = FALSE
c = T
d = F
a
c
d
# numeric
e = 3.1
f = 0.5
e+f
e-f
e/f
e*f
e^f
# integer
f = 3L
class(e)
4 * f
f
# integer
f = 3
f
# character (strings ou texto)
g = "ola"
h = 'mundo'
paste0(g, h)
paste(g, h)
paste(g, h, sep = ", ")
paste(g, h, sep = " batatinha ")
paste(g, h, sep = " 23")
?paste
?paste0
d1 = as.Date("2018-05-07", "%Y-%m-%d")
class(d1)
d1
d2 = as.Date("10/07/18", "%d/%m/%y")
d1
d2
d2-d1
as.numeric(d2-d1)
format(d2, "Estamos no %dº dia de %B")
format(Sys.Date(), "Estamos no %dº dia de %B")
# Sequencia de datas
seq(d1, d2, by="day")
seq(d1, d2, by="week")
seq(d1, d2, by="month")
# LISTAS
# Criando
lista = list(2L, 900.3, "abcdef", as.Date("2018-01-01"), 2:10)
lista
lista[[1]][1]
lista[[5]][1]
lista[[5]][1][2]
lista[[5]][1]
for (value in lista[[5]][1]) {
print(value)
}
# LISTAS
# Criando
lista = list(5L, 900.3, "abcdef", as.Date("2018-01-01"), 2:10)
for (value in lista[[5]][1]) {
print(value)
}
for(i in dataList){print(i)}
for (value in lista[[5]]) {
print(value)
}
for(i in lista){print(i)}
lista.nomeada = list(
nome = "acoes",
codigo = 3,
data = as.Date("2018-01-01"),
papeis = 2:10
)
lista.nomeada$nome
# Criando
v1 = c(10, 20, 30, 40) # concatena (junta) os elementos em um vetor
v2 = 1:4               # atalho para criar vetor com sequencias
v1
class(v1)
str(v2)
v1[c(TRUE, FALSE, TRUE, TRUE)]
v1[v1 > 25]
# Modificando
v1[3] = 35
v1
v1[v1 < 30] = 0
v1
# Vetorizacao
v1 = c(10, 20, 30, 40)
v2  = 1:4
length(v1)
length(v2)
v1 + v2
v1 * v2
# Vetorizacao
v1 = c(10, 20, 30, 40, 50)
v1 + v2
# Vetorizacao
v1 = c(10, 20)
v1 + v2
v1 * v2
# Vetorizacao
v1 = c(10, 20, 30, 40)
v2  = 1:4
length(v1)
length(v2)
v1 + v2
v1 * v2
# Operacoes com escalares
v1-2
v1^2
v1/10
v1/10 + 5
runif(4)
runif(4)
runif(4)
runif(4)
runif(5)
N = 3*4
df = data.frame(
id = 1:N,
data = rep(as.Date("2018-01-05") + (1:(N/3)), each = 3), # rep: repete as datas 3x cada
nome = c("Acoes", "Juros", "Cambio"),                    # esse vetor sera reciclado
saldo = 1000 + 10*runif(N),                              # runif: aleatorio uniforme de 0 a 1
mtm = 1000 + 20*runif(N),
stringsAsFactors = FALSE
)
# le pedacos do df
df[1,]
df[-2,]
df
df[-1]
df[-1,2]
df[-1,1]
df[-1,3]
df[1,3]
df[-1,]
df[1:5,]
df[1:3, 1:4]
R.version.string
df2 = data.frame(
data = as.Date("2018-01-10"),
nome = "Acoes",
saldo = 1010,
mtm = 1020,
classificacao = "MAV",
stringsAsFactors = FALSE
)
df = rbind(df, df2)
df$id = NULL
df2 = data.frame(
data = as.Date("2018-01-10"),
nome = "Acoes",
saldo = 1010,
mtm = 1020,
classificacao = "MAV",
stringsAsFactors = FALSE
)
df = rbind(df, df2)
df$classificacao = "DPV"
df[df$saldo > 1001,"saldo"] = 1001
df = rbind(df, df2)
df = rbind(df, df2)
df
df = rbind(df, data.frame(
data = as.Date("2020-01-10"),
nome = "Teste",
saldo = 0,
mtm = 0,
classificacao = "Teste",
stringsAsFactors = FALSE
))
df
df = df[df$nome == "Juros",]
df
square = function(x){
x^2
}
square(5)
square(x = 10)
sum = function(x, y = 2) {
x + y
}
sum(1)
sum(5, 20)
square(c(10, 20, 30))
eh.par2 = function(x){
stopifnot(is.integer(x), length(x) == 1)
if(x %% 2 == 0) {
return("par")
} else {
return("impar")
}
}
eh.par2(10L)
eh.par2(25L)
eh.par2(c(10L, 25L))
x = 5
while(x > 0) {
print(x)
x--
}
x-1
while(x > 0) {
print(x)
x-1
}
x = 5
while(x > 0) {
print(x)
x = x-1
}
is(5, "integer")
is(5L, "integer")
carregar.dados = function(dt){
# validacoes
stopifnot(is(dt, "Date"), length(dt) == 1)
# carga de dados
# (...)
# fim da carga de dados
msg = format(dt, "Dados carregados com sucesso para %d/%m/%Y!")
print(msg)
}
datas = seq(from = as.Date("2018-06-28"), as.Date("2018-07-03"), by="day")
length(datas)
for(i in 1:length(datas)){
dt = datas[i]
carregar.dados(dt)
}
carregar.dados(as.Date("2020-01-01"))
carregar.dados(as.Date("2020-01-51"))
# Vetorizacao
v1 = c(10, 20, 30, 40)
v1[2]
v1[0]
read.csv("Dados/carteira.csv")
dados = read.csv("Dados/carteira.csv")
dados
dados = read.csv2("Dados/carteira2.csv")
dados = read.csv2("Dados/carteira2.csv")
dados = read.csv("Dados/carteira.csv")
dados
dados = read.csv2("Dados/carteira2.csv")
dados
?read.csv2
str(dados)
dados = read.csv2("Dados/carteira2.csv",
stringsAsFactors = FALSE)
str(dados)
dados$data = as.Date(dados$data, "%Y-%m-%d")
dados$vencimento = as.Date(dados$vencimento, "%Y-%m-%d")
str(dados)
dados
dados = read.fwf("Dados/carteira.txt",
widths = c(1, 10, 5, 10, 3, 11))
dados
dados = read.fwf("Dados/carteira.txt",
widths = c(1, 10, 5, 10, 3, 11))
dados
colnames(dados)
colnames(dados) = c("id", "data", "papel", "vencimento", "quantidade", "preco")
colnames(dados)
dados
str(dados)
dados = read.fwf("Dados/carteira.txt",
widths = c(1, 10, 5, 10, 3, 11),
stringsAsFactors = FALSE)
colnames(dados) = c("id", "data", "papel", "vencimento", "quantidade", "preco")
dados$data = as.Date(dados$data, "%Y-%m-%d")
dados$vencimento = as.Date(dados$vencimento, "%Y-%m-%d")
dados
str(dados)
dados = read.fwf("Dados/carteira.txt",
widths = c(1, 10, 5, 10, 3, 11),
stringsAsFactors = FALSE,
strip.white = TRUE)
colnames(dados) = c("id", "data", "papel", "vencimento", "quantidade", "preco")
dados$data = as.Date(dados$data, "%Y-%m-%d")
dados$vencimento = as.Date(dados$vencimento, "%Y-%m-%d")
dados
str(dados)
library(readxl)
dados = read_excel("Dados/carteira.xlsx", sheet = "carteira2")
dados
dados = as.data.frame(dados)
dados
str(dados)
dados$data = as.Date(dados$data)
dados$vencimento = as.Date(dados$vencimento)
dados
str(dados)
install.packages("XML")
library(XML)
doc = xmlParse("Dados/carteira.xml")
doc = xmlParse("Dados/carteira.xml")
doc
root = xmlRoot(doc)
root
doc
lista.dados = xmlElementsByTagName(root, "dado")
View(lista.dados)
valores = getChildrenStrings(lista.dados[[1]])
valores
lista.dados
?
t
t(valores)
valores
valores
t(valores)
dados = data.frame()
valores
t(valores)
t(valores)[1]
t(valores)[2]
t(valores)[1,2]
t(valores)[1,5]
library(XML)
doc = xmlParse("Dados/carteira.xml")
doc
root = xmlRoot(doc)
lista.dados = xmlElementsByTagName(root, "dado")
valores = getChildrenStrings(lista.dados[[1]])
valores
dados = data.frame()
for(i in 1:length(lista.dados)){
dado = lista.dados[[i]]
valores = getChildrenStrings(dado)
d = as.data.frame(t(valores), stringsAsFactors = FALSE)
dados = rbind(dados, d)
}
dados
str(dados)
attach(dados$id)
attach(dados)
id
unattach(dados)
detach(dados)
id
filhos = xmlChildren(dado)
filhos
filhos$id
library(XML)
doc = xmlParse("Dados/carteira.html")
root = xmlRoot(doc)
root
dados = readHTMLTable(root, stringsAsFactors = FALSE)
dados
# nomeando as colunas com a primeira linha de dados
colnames(dados) = dados[1,]
# removendo a primeira linha
dados = dados[-1,]
dados
str(dados)
dados = readHTMLTable(root)#, stringsAsFactors = FALSE)
str(dados)
dados = readHTMLTable(root, stringsAsFactors = FALSE)
str(dados)
# nomeando as colunas com a primeira linha de dados
colnames(dados) = dados[1,]
# removendo a primeira linha
dados = dados[-1,]
str(dados)
plot(cars)
str(dados)
dados$data = as.Date(dados$data, "%Y-%m-%d")
dados$vencimento = as.Date(dados$vencimento, "%Y-%m-%d")
dados$quantidade = as.numeric(dados$quantidade)
dados$preco = as.numeric(dados$preco)
str(dados)
# convertendo tipos de dados
dados$id = as.integer(dados$id)
str(dados)
library(jsonlite)
dados = fromJSON("Dados/carteira.json")
dados
str(dados)
dados$data = as.Date(dados$data, "%Y-%m-%d")
dados$vencimento = as.Date(dados$vencimento, "%Y-%m-%d")
str(dados)
dados = fromJSON("Dados/carteira.json")
dados
str(dados)
install.packages("bizdays")
# Pacote bizdays
#install.packages("bizdays") # instala o pacote
library(bizdays) # carrega o pacote
# criando calendario com feriados ANBIMA
holidaysANBIMA
create.calendar(name = "ANBIMA", holidays=holidaysANBIMA, weekdays=c("saturday", "sunday"))
# verificando se uma data eh dia util
d1 = as.Date("2018-01-07")
d1
d2 = as.Date("2018-01-17")
d2
is.bizday(d1, "ANBIMA")
is.bizday(d2, "ANBIMA")
# verificando se uma data eh dia util (vetorizado)
datas = seq(d1, d2, by="day")
datas
is.bizday(datas, "ANBIMA")
# gerando vetor de datas uteis
bizseq(from = d1, to = d2, cal = "ANBIMA")
# dias uteis entre datas
bizdays(from = d1, to = d2, cal = "ANBIMA")
add.bizdays(as.Date("2018-01-15"), n = -6, "ANBIMA")
# ajuste para data util mais proxima
adjust.next(as.Date("2018-01-13"), "ANBIMA")
add.bizdays(as.Date("2018-01-15"), n = -6, "ANBIMA")
data.base = as.Date("2018-07-10")
vencimento = as.Date("2021-01-01")
tir = 9.04
proximos.pgtos = seq(from = vencimento, to = data.base, by = "-6 months")
proximos.pgtos
rev(proximos.pgtos)
proximos.pgtos = rev(proximos.pgtos)
proximos.pgtos = adjust.next(proximos.pgtos, "ANBIMA")
proximos.pgtos
du = bizdays(from = data.base, to = proximos.pgtos, cal = "ANBIMA")
du
principal = 1000
juros = ((1+10/100)^(1/2) - 1) * principal
juros
# valor futuro
vf = rep(juros, length(proximos.pgtos)) # pgtos de juros
vf[length(vf)]
vf[length(vf)] = vf[length(vf)] + principal # adicionando principal no ultimo pgto
vf
# calculo do preco
vp = vf / ((1+tir/100)^(du/252))
vp
preco = sum(vp)
preco
ntn.f = data.frame(
datas = proximos.pgtos,
prazo.du = du,
vf = vf,
vp = vp
)
ntn.f
data.base
vencimento
tir
preco
sum(ntn.f$vp)
