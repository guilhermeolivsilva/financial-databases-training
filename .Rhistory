dados$vencimento = as.Date(dados$vencimento, "%Y-%m-%d")
dados
str(dados)
dados = read.fwf("Dados/carteira.txt",
widths = c(1, 10, 5, 10, 3, 11),
stringsAsFactors = FALSE,
strip.white = TRUE)
colnames(dados) = c("id", "data", "papel", "vencimento", "quantidade", "preco")
dados$data = as.Date(dados$data, "%Y-%m-%d")
dados$vencimento = as.Date(dados$vencimento, "%Y-%m-%d")
dados
str(dados)
library(readxl)
dados = read_excel("Dados/carteira.xlsx", sheet = "carteira2")
dados
dados = as.data.frame(dados)
dados
str(dados)
dados$data = as.Date(dados$data)
dados$vencimento = as.Date(dados$vencimento)
dados
str(dados)
install.packages("XML")
library(XML)
doc = xmlParse("Dados/carteira.xml")
doc = xmlParse("Dados/carteira.xml")
doc
root = xmlRoot(doc)
root
doc
lista.dados = xmlElementsByTagName(root, "dado")
View(lista.dados)
valores = getChildrenStrings(lista.dados[[1]])
valores
lista.dados
?
t
t(valores)
valores
valores
t(valores)
dados = data.frame()
valores
t(valores)
t(valores)[1]
t(valores)[2]
t(valores)[1,2]
t(valores)[1,5]
library(XML)
doc = xmlParse("Dados/carteira.xml")
doc
root = xmlRoot(doc)
lista.dados = xmlElementsByTagName(root, "dado")
valores = getChildrenStrings(lista.dados[[1]])
valores
dados = data.frame()
for(i in 1:length(lista.dados)){
dado = lista.dados[[i]]
valores = getChildrenStrings(dado)
d = as.data.frame(t(valores), stringsAsFactors = FALSE)
dados = rbind(dados, d)
}
dados
str(dados)
attach(dados$id)
attach(dados)
id
unattach(dados)
detach(dados)
id
filhos = xmlChildren(dado)
filhos
filhos$id
library(XML)
doc = xmlParse("Dados/carteira.html")
root = xmlRoot(doc)
root
dados = readHTMLTable(root, stringsAsFactors = FALSE)
dados
# nomeando as colunas com a primeira linha de dados
colnames(dados) = dados[1,]
# removendo a primeira linha
dados = dados[-1,]
dados
str(dados)
dados = readHTMLTable(root)#, stringsAsFactors = FALSE)
str(dados)
dados = readHTMLTable(root, stringsAsFactors = FALSE)
str(dados)
# nomeando as colunas com a primeira linha de dados
colnames(dados) = dados[1,]
# removendo a primeira linha
dados = dados[-1,]
str(dados)
plot(cars)
str(dados)
dados$data = as.Date(dados$data, "%Y-%m-%d")
dados$vencimento = as.Date(dados$vencimento, "%Y-%m-%d")
dados$quantidade = as.numeric(dados$quantidade)
dados$preco = as.numeric(dados$preco)
str(dados)
# convertendo tipos de dados
dados$id = as.integer(dados$id)
str(dados)
library(jsonlite)
dados = fromJSON("Dados/carteira.json")
dados
str(dados)
dados$data = as.Date(dados$data, "%Y-%m-%d")
dados$vencimento = as.Date(dados$vencimento, "%Y-%m-%d")
str(dados)
dados = fromJSON("Dados/carteira.json")
dados
str(dados)
install.packages("bizdays")
# Pacote bizdays
#install.packages("bizdays") # instala o pacote
library(bizdays) # carrega o pacote
# criando calendario com feriados ANBIMA
holidaysANBIMA
create.calendar(name = "ANBIMA", holidays=holidaysANBIMA, weekdays=c("saturday", "sunday"))
# verificando se uma data eh dia util
d1 = as.Date("2018-01-07")
d1
d2 = as.Date("2018-01-17")
d2
is.bizday(d1, "ANBIMA")
is.bizday(d2, "ANBIMA")
# verificando se uma data eh dia util (vetorizado)
datas = seq(d1, d2, by="day")
datas
is.bizday(datas, "ANBIMA")
# gerando vetor de datas uteis
bizseq(from = d1, to = d2, cal = "ANBIMA")
# dias uteis entre datas
bizdays(from = d1, to = d2, cal = "ANBIMA")
add.bizdays(as.Date("2018-01-15"), n = -6, "ANBIMA")
# ajuste para data util mais proxima
adjust.next(as.Date("2018-01-13"), "ANBIMA")
add.bizdays(as.Date("2018-01-15"), n = -6, "ANBIMA")
data.base = as.Date("2018-07-10")
vencimento = as.Date("2021-01-01")
tir = 9.04
proximos.pgtos = seq(from = vencimento, to = data.base, by = "-6 months")
proximos.pgtos
rev(proximos.pgtos)
proximos.pgtos = rev(proximos.pgtos)
proximos.pgtos = adjust.next(proximos.pgtos, "ANBIMA")
proximos.pgtos
du = bizdays(from = data.base, to = proximos.pgtos, cal = "ANBIMA")
du
principal = 1000
juros = ((1+10/100)^(1/2) - 1) * principal
juros
# valor futuro
vf = rep(juros, length(proximos.pgtos)) # pgtos de juros
vf[length(vf)]
vf[length(vf)] = vf[length(vf)] + principal # adicionando principal no ultimo pgto
vf
# calculo do preco
vp = vf / ((1+tir/100)^(du/252))
vp
preco = sum(vp)
preco
ntn.f = data.frame(
datas = proximos.pgtos,
prazo.du = du,
vf = vf,
vp = vp
)
ntn.f
data.base
vencimento
tir
preco
sum(ntn.f$vp)
date = as.Date("2020-01-02")
url = format(date, "ftp://ftp.bmf.com.br/IndicadoresEconomicos/ID%y%m%d.ex_")
arquivo = format(dt, "Downloads/ID%y%m%d.exe")
download.file(url = url, destfile = arquivo, mode = "wb")
files = unzip(zipfile = arquivo, exdir = "Downloads")
layout = read.csv2("Layout/layout_bmfindic.csv",
stringsAsFactors = F)
dados = read.fwf(file = files, widths = layout$tamanho)
url = format(date, "ftp://ftp.bmf.com.br/IndicadoresEconomicos/ID%y%m%d.ex_")
arquivo = format(dt, "Downloads/ID%y%m%d.exe")
download.file(url = url, destfile = arquivo, mode = "wb")
download.file(url = link, destfile = arquivo, mode = "wb")
link = format(date, "ftp://ftp.bmf.com.br/IndicadoresEconomicos/ID%y%m%d.ex_")
download.file(url = link, destfile = arquivo, mode = "wb")
date = as.Date("2020-01-02")
link = format(date, "ftp://ftp.bmf.com.br/IndicadoresEconomicos/ID%y%m%d.ex_")
arquivo = format(dt, "Downloads/ID%y%m%d.exe")
download.file(url = link, destfile = arquivo, mode = "wb")
date = as.Date("2020-01-02")
link = format(date, "ftp://ftp.bmf.com.br/IndicadoresEconomicos/ID%y%m%d.ex_")
arquivo = format(date, "Downloads/ID%y%m%d.exe")
download.file(url = link, destfile = arquivo, mode = "wb")
files = unzip(zipfile = arquivo, exdir = "Downloads")
layout = read.csv2("Layout/layout_bmfindic.csv",
stringsAsFactors = F)
dados = read.fwf(
file = files,
widths = layout$tamanho,
col.names = layout$campo,
stringsAsFactors = F,
strip.white = T
)
head(dados)
summary(dados)
str(dados)
is.Date(date)
lerBmfPorData = function(date) {
stopifnot(length(date) == 1)
if(class(date) != "Date") {
date = as.Date(date, "%Y-%m-%d")
}
url = format(date, "ftp://ftp.bmf.com.br/IndicadoresEconomicos/ID%y%m%d.ex_")
arquivo = format(date, "Downloads/ID%y%m%d.exe")
download.file(url = url, destfile = arquivo, mode = "wb")
files = unzip(zipfile = arquivo, exdir = "Downloads")
layout = read.csv2("Layout/layout_bmfindic.csv", stringsAsFactors = F)
dados = read.fwf(
file = files,
widths = layout$tamanho,
col.names = layout$campo,
stringsAsFactors = F,
strip.white = T
)
dados$DT_ARQUIVO = as.Date(as.character(dados$DT_ARQUIVO), "%Y%m%d")
dados$VL_INDICADOR = dados$VL_INDICADOR/(10^dados$NUM_CASAS_DECIMAIS)
return(dados)
}
lerBmfPorData = function(date) {
stopifnot(length(date) == 1)
if(class(date) != "Date") {
date = as.Date(date, "%Y-%m-%d")
}
url = format(date, "ftp://ftp.bmf.com.br/IndicadoresEconomicos/ID%y%m%d.ex_")
arquivo = format(date, "Downloads/ID%y%m%d.exe")
download.file(url = url, destfile = arquivo, mode = "wb")
files = unzip(zipfile = arquivo, exdir = "Downloads")
layout = read.csv2("Layout/layout_bmfindic.csv", stringsAsFactors = F)
dados = read.fwf(
file = files,
widths = layout$tamanho,
col.names = layout$campo,
stringsAsFactors = F,
strip.white = T
)
dados$DT_ARQUIVO = as.Date(as.character(dados$DT_ARQUIVO), "%Y%m%d")
dados$VL_INDICADOR = dados$VL_INDICADOR/(10^dados$NUM_CASAS_DECIMAIS)
dados$NUM_CASAS_DECIMAIS = NULL
return(dados[dados$DT_ARQUIVO == date,])
}
lerBmfPorData("2018-07-16")
license()
BvbgPorData = function(date) {
stopifnot(length(date) == 1)
if(class(date) != "Date") {
date = as.Date(date, "%Y-%m-%d")
}
url = format(date, "ftp://ftp.bmf.com.br/IPN/TRS/BVBG.086.01/PR%y%m%d.zip")
filename = format(date, "Downloads/PR%y%m%d.zip")
download.file(url = url, destfile = filename)
files = unzip(filename, exdir = "Downloads/BVBG")
root = xmlRoot(xmlParse(max(files)))
BizFileHdr = xmlChildren(root)[[1]]
}
BvbgPorData("2020-06-19")
library(XML)
BvbgPorData("2020-06-19")
library(plyr)
install.packages("plyr")
library(XML)
library(plyr)
BvbgIndividualPorData = function(date) {
stopifnot(length(date) == 1)
if(class(date) != "Date") {
date = as.Date(date, "%Y-%m-%d")
}
url = format(date, "ftp://ftp.bmf.com.br/IPN/TRS/BVBG.086.01/PR%y%m%d.zip")
filename = format(date, "Downloads/PR%y%m%d.zip")
download.file(url = url, destfile = filename)
files = unzip(filename, exdir = "Downloads/BVBG")
root = xmlRoot(xmlParse(max(files)))
# NOTA: abordagem simples, mas lenta: xmlElementsByTagName(root, "PricRpt", recursive = T)
bizFileHdr = xmlChildren(root)[[1]]
xchange = xmlChildren(bizFileHdr)[[1]]
bizGroups = xmlElementsByTagName(xchange, "BizGrp", recursive = F)
# 56 foi uma escolha arbitr√°ria
bizGroup = bizGroups[[56]]
doc = xmlElementsByTagName(bizGroup, "Document", recursive = F)[[1]]
priceReport = xmlChildren(doc)[[1]]
tickerSymbol = xmlValue(xmlElementsByTagName(priceReport, "TckerSymb", recursive = T))[[1]]
finInstrAttributes = xmlElementsByTagName(priceReport, "finInstrAttributes", recursive = F)[[1]]
df = as.data.frame(t(getChildrenStrings(finInstrAttributes)), stringsAsFactors = F)
df$tickerSymbol = tickerSymbol
return(df)
}
BvbgPorData = function(date) {
stopifnot(length(date) == 1)
if(class(date) != "Date") {
date = as.Date(date, "%Y-%m-%d")
}
url = format(date, "ftp://ftp.bmf.com.br/IPN/TRS/BVBG.086.01/PR%y%m%d.zip")
filename = format(date, "Downloads/PR%y%m%d.zip")
download.file(url = url, destfile = filename)
files = unzip(filename, exdir = "Downloads/BVBG")
root = xmlRoot(xmlParse(max(files)))
# NOTA: abordagem simples, mas lenta: xmlElementsByTagName(root, "PricRpt", recursive = T)
bizFileHdr = xmlChildren(root)[[1]]
xchange = xmlChildren(bizFileHdr)[[1]]
bizGroups = xmlElementsByTagName(xchange, "BizGrp", recursive = F)
for(bizGroup in bizGroups) {
doc = xmlElementsByTagName(bizGroup, "Document", recursive = F)[[1]]
priceReport = xmlChildren(doc)[[1]]
tickerSymbol = xmlValue(xmlElementsByTagName(priceReport, "TckerSymb", recursive = T))[[1]]
finInstrAttributes = xmlElementsByTagName(priceReport, "finInstrAttributes", recursive = F)[[1]]
node = as.data.frame(t(getChildrenStrings(finInstrAttributes)), stringsAsFactors = F)
node$tickerSymbol = tickerSymbol
}
return(df)
}
library(XML)
library(plyr)
BvbgIndividualPorData = function(date) {
stopifnot(length(date) == 1)
if(class(date) != "Date") {
date = as.Date(date, "%Y-%m-%d")
}
url = format(date, "ftp://ftp.bmf.com.br/IPN/TRS/BVBG.086.01/PR%y%m%d.zip")
filename = format(date, "Downloads/PR%y%m%d.zip")
download.file(url = url, destfile = filename)
files = unzip(filename, exdir = "Downloads/BVBG")
root = xmlRoot(xmlParse(max(files)))
# NOTA: abordagem simples, mas lenta: xmlElementsByTagName(root, "PricRpt", recursive = T)
bizFileHdr = xmlChildren(root)[[1]]
xchange = xmlChildren(bizFileHdr)[[1]]
bizGroups = xmlElementsByTagName(xchange, "BizGrp", recursive = F)
# 56 foi uma escolha arbitr√°ria
bizGroup = bizGroups[[56]]
doc = xmlElementsByTagName(bizGroup, "Document", recursive = F)[[1]]
priceReport = xmlChildren(doc)[[1]]
tickerSymbol = xmlValue(xmlElementsByTagName(priceReport, "TckerSymb", recursive = T))[[1]]
finInstrAttributes = xmlElementsByTagName(priceReport, "finInstrAttributes", recursive = F)[[1]]
df = as.data.frame(t(getChildrenStrings(finInstrAttributes)), stringsAsFactors = F)
df$tickerSymbol = tickerSymbol
return(df)
}
BvbgPorData = function(date) {
stopifnot(length(date) == 1)
if(class(date) != "Date") {
date = as.Date(date, "%Y-%m-%d")
}
dados = data.frame()
url = format(date, "ftp://ftp.bmf.com.br/IPN/TRS/BVBG.086.01/PR%y%m%d.zip")
filename = format(date, "Downloads/PR%y%m%d.zip")
download.file(url = url, destfile = filename)
files = unzip(filename, exdir = "Downloads/BVBG")
root = xmlRoot(xmlParse(max(files)))
# NOTA: abordagem simples, mas lenta: xmlElementsByTagName(root, "PricRpt", recursive = T)
bizFileHdr = xmlChildren(root)[[1]]
xchange = xmlChildren(bizFileHdr)[[1]]
bizGroups = xmlElementsByTagName(xchange, "BizGrp", recursive = F)
for(bizGroup in bizGroups) {
doc = xmlElementsByTagName(bizGroup, "Document", recursive = F)[[1]]
priceReport = xmlChildren(doc)[[1]]
tickerSymbol = xmlValue(xmlElementsByTagName(priceReport, "TckerSymb", recursive = T))[[1]]
finInstrAttributes = xmlElementsByTagName(priceReport, "finInstrAttributes", recursive = F)[[1]]
node = as.data.frame(t(getChildrenStrings(finInstrAttributes)), stringsAsFactors = F)
node$tickerSymbol = tickerSymbol
dados = rbind.fill(dados, node)
}
return(dados)
}
library(XML)
library(plyr)
from.node.to.data.frame = function(b) {
doc = xmlElementsByTagName(bizGroup, "Document", recursive = F)[[1]]
priceReport = xmlChildren(doc)[[1]]
tickerSymbol = xmlValue(xmlElementsByTagName(priceReport, "TckerSymb", recursive = T))[[1]]
finInstrAttributes = xmlElementsByTagName(priceReport, "finInstrAttributes", recursive = F)[[1]]
node = as.data.frame(t(getChildrenStrings(finInstrAttributes)), stringsAsFactors = F)
node$tickerSymbol = tickerSymbol
return(node)
}
BvbgIndividualPorData = function(date) {
stopifnot(length(date) == 1)
if(class(date) != "Date") {
date = as.Date(date, "%Y-%m-%d")
}
url = format(date, "ftp://ftp.bmf.com.br/IPN/TRS/BVBG.086.01/PR%y%m%d.zip")
filename = format(date, "Downloads/PR%y%m%d.zip")
download.file(url = url, destfile = filename)
files = unzip(filename, exdir = "Downloads/BVBG")
root = xmlRoot(xmlParse(max(files)))
# NOTA: abordagem simples, mas lenta: xmlElementsByTagName(root, "PricRpt", recursive = T)
bizFileHdr = xmlChildren(root)[[1]]
xchange = xmlChildren(bizFileHdr)[[1]]
bizGroups = xmlElementsByTagName(xchange, "BizGrp", recursive = F)
# 56 foi uma escolha arbitr√°ria
bizGroup = bizGroups[[56]]
doc = xmlElementsByTagName(bizGroup, "Document", recursive = F)[[1]]
priceReport = xmlChildren(doc)[[1]]
tickerSymbol = xmlValue(xmlElementsByTagName(priceReport, "TckerSymb", recursive = T))[[1]]
finInstrAttributes = xmlElementsByTagName(priceReport, "finInstrAttributes", recursive = F)[[1]]
df = as.data.frame(t(getChildrenStrings(finInstrAttributes)), stringsAsFactors = F)
df$tickerSymbol = tickerSymbol
return(df)
}
BvbgPorData = function(date) {
stopifnot(length(date) == 1)
if(class(date) != "Date") {
date = as.Date(date, "%Y-%m-%d")
}
dados = data.frame()
url = format(date, "ftp://ftp.bmf.com.br/IPN/TRS/BVBG.086.01/PR%y%m%d.zip")
filename = format(date, "Downloads/PR%y%m%d.zip")
download.file(url = url, destfile = filename)
files = unzip(filename, exdir = "Downloads/BVBG")
root = xmlRoot(xmlParse(max(files)))
# NOTA: abordagem simples, mas lenta: xmlElementsByTagName(root, "PricRpt", recursive = T)
bizFileHdr = xmlChildren(root)[[1]]
xchange = xmlChildren(bizFileHdr)[[1]]
bizGroups = xmlElementsByTagName(xchange, "BizGrp", recursive = F)
# Vers√£o "manual" (lenta)
# for(bizGroup in bizGroups) {
#   dados = rbind.fill(dados, from.node.to.data.frame(bizGroup))
# }
# Vers√£o interna do pacote (r√°pida)
dados = ldply(.data = BizGroups, .fun = from.node.to.data.frame)
return(dados)
}
source('D:/Projetos/financial-databases-training/Pr√°ticas/BVBG.R', encoding = 'UTF-8')
library(XML)
library(plyr)
from.node.to.data.frame = function(b) {
doc = xmlElementsByTagName(bizGroup, "Document", recursive = F)[[1]]
priceReport = xmlChildren(doc)[[1]]
tickerSymbol = xmlValue(xmlElementsByTagName(priceReport, "TckerSymb", recursive = T))[[1]]
finInstrAttributes = xmlElementsByTagName(priceReport, "finInstrAttributes", recursive = F)[[1]]
node = as.data.frame(t(getChildrenStrings(finInstrAttributes)), stringsAsFactors = F)
node$tickerSymbol = tickerSymbol
return(node)
}
BvbgIndividualPorData = function(date) {
stopifnot(length(date) == 1)
if(class(date) != "Date") {
date = as.Date(date, "%Y-%m-%d")
}
url = format(date, "ftp://ftp.bmf.com.br/IPN/TRS/BVBG.086.01/PR%y%m%d.zip")
filename = format(date, "Downloads/PR%y%m%d.zip")
download.file(url = url, destfile = filename)
files = unzip(filename, exdir = "Downloads/BVBG")
root = xmlRoot(xmlParse(max(files)))
# NOTA: abordagem simples, mas lenta: xmlElementsByTagName(root, "PricRpt", recursive = T)
bizFileHdr = xmlChildren(root)[[1]]
xchange = xmlChildren(bizFileHdr)[[1]]
bizGroups = xmlElementsByTagName(xchange, "BizGrp", recursive = F)
# 56 foi uma escolha arbitr√°ria
bizGroup = bizGroups[[56]]
doc = xmlElementsByTagName(bizGroup, "Document", recursive = F)[[1]]
priceReport = xmlChildren(doc)[[1]]
tickerSymbol = xmlValue(xmlElementsByTagName(priceReport, "TckerSymb", recursive = T))[[1]]
finInstrAttributes = xmlElementsByTagName(priceReport, "finInstrAttributes", recursive = F)[[1]]
df = as.data.frame(t(getChildrenStrings(finInstrAttributes)), stringsAsFactors = F)
df$tickerSymbol = tickerSymbol
return(df)
}
BvbgPorData = function(date) {
stopifnot(length(date) == 1)
if(class(date) != "Date") {
date = as.Date(date, "%Y-%m-%d")
}
dados = data.frame()
url = format(date, "ftp://ftp.bmf.com.br/IPN/TRS/BVBG.086.01/PR%y%m%d.zip")
filename = format(date, "Downloads/PR%y%m%d.zip")
download.file(url = url, destfile = filename)
files = unzip(filename, exdir = "Downloads/BVBG")
root = xmlRoot(xmlParse(max(files)))
file.remove(files)
# NOTA: abordagem simples, mas lenta: xmlElementsByTagName(root, "PricRpt", recursive = T)
bizFileHdr = xmlChildren(root)[[1]]
xchange = xmlChildren(bizFileHdr)[[1]]
bizGroups = xmlElementsByTagName(xchange, "BizGrp", recursive = F)
# Vers√£o "manual" (lenta)
# for(bizGroup in bizGroups) {
#   dados = rbind.fill(dados, from.node.to.data.frame(bizGroup))
# }
# Vers√£o interna do pacote (r√°pida)
dados = ldply(.data = BizGroups, .fun = from.node.to.data.frame)
dados[, ".id"] = NULL
non.numerics = c("TckerSymb", "MktDataStrmId", "AdjstQtStin", "PrvsAdjstQtStin")
numerics = colnames(dados)[!colnames(dados) %in% non.numerics]
for(column in numerics) { dados[, column] = as.numeric(dados[, column]) }
return(dados)
}
BvbgPorData("2018-07-20")
source('D:/Projetos/financial-databases-training/Pr√°ticas/BVBG.R', encoding = 'UTF-8')
BvbgPorData("2018-07-20")
source('D:/Projetos/financial-databases-training/Pr√°ticas/BVBG.R', encoding = 'UTF-8')
BvbgPorData("2018-07-20")
source('D:/Projetos/financial-databases-training/Pr√°ticas/BVBG.R', encoding = 'UTF-8')
BvbgPorData("2018-07-20")
install.packages("Rook")
?paste0
print(paste0("teste", "batata"))
print(paste("teste", "batata"))
?format
#install.packages("httr")
library(httr)
