teste = c(c("a", "b"), "c")
teste = c(c("a", "b"), "c", recursive = FALSE)
teste = c(c("a", "b"), "c", recursive = T)
teste = c("c", c("a", "b"), recursive = T)
teste = c("c", c("a", "b"), recursive = F)
library(httr)
url = "http://anbima.com.br/est_termo/CZ-down.asp"
req = POST(
url = url,
body = list(
Idioma = "PT"
Dt_ref = "02/08/2018",
saida = "xml"
)
)
txt = content(req, as = "text")
library(httr)
url = "http://anbima.com.br/est_termo/CZ-down.asp"
req = POST(
url = url,
body = list(
Idioma = "PT",
Dt_ref = "02/08/2018",
saida = "xml"
)
)
txt = content(req, as = "text")
View(req)
library(httr)
url = "http://anbima.com.br/est_termo/CZ-down.asp"
req = POST(
url = url,
encode = "form",
body = list(
Idioma = "PT",
Dt_ref = "02/08/2018",
saida = "xml"
)
)
txt = content(req, as = "text")
View(req)
library(httr)
url = "https://www.anbima.com.br/informacoes/est-termo/CZ-down.asp"
req = POST(
url = url,
encode = "form",
body = list(
Idioma = "PT",
Dt_ref = "02/08/2018",
saida = "xml"
)
)
txt = content(req, as = "text")
View(req)
# date = Sys.Date() - 1
anbimaMercSec = function(date) {
stopifnot(length(date) == 1)
if(class(date) != "Date") {
if(class(date) == "int") {
date = as.Date(as.character(date), "%Y-%m-%d")
}
if(class(date) == "string") {
date = as.Date(date, "%Y-%m-%d")
} else {
return(NULL)
}
}
url = format(date, "https://www.anbima.com.br/informacoes/merc-sec/arqs/ms%y%m%d.txt")
dados = read.table(
file = url,
header = T,
sep = "@",
dec = ",",
skip = 2,
stringsAsFactors = F,
na.strings = "--"
)
# Adicionar conversão de datas para o tipo adequado
return(dados)
}
anbimaMercSec("2018-03-05")
class("2018-03-05")
# date = Sys.Date() - 1
anbimaMercSec = function(date) {
stopifnot(length(date) == 1)
if(class(date) != "Date") {
if(class(date) == "int") {
date = as.Date(as.character(date), "%Y-%m-%d")
}
if(class(date) == "character") {
date = as.Date(date, "%Y-%m-%d")
} else {
return(NULL)
}
}
url = format(date, "https://www.anbima.com.br/informacoes/merc-sec/arqs/ms%y%m%d.txt")
dados = read.table(
file = url,
header = T,
sep = "@",
dec = ",",
skip = 2,
stringsAsFactors = F,
na.strings = "--"
)
# Adicionar conversão de datas para o tipo adequado
return(dados)
}
anbimaMercSec("2018-03-05")
library(httr)
url = "https://www.anbima.com.br/informacoes/est-termo/CZ-down.asp"
req = POST(
url = url,
encode = "form",
body = list(
Idioma = "PT",
Dt_ref = "02/08/2018",
saida = "xml"
)
)
txt = content(req, as = "text")
View(req)
library(httr)
url = "https://www.anbima.com.br/informacoes/est-termo/CZ-down.asp"
req = POST(
url = url,
encode = "form",
body = list(
Idioma = "PT",
Dt_ref = "02/08/2018",
saida = "xml"
)
)
txt = content(req, as = "text")
library(XML)
doc = xmlParseString(content(req, as = "text"))
params = xmlElementsByTagName(root, "PARAMETRO", recursive = T)
doc = xmlParseString(content(req, as = "text"))
root = xmlRoot(doc)
params = xmlElementsByTagName(root, "PARAMETRO", recursive = T)
View(params)
library(httr)
library(XML)
url = "https://www.anbima.com.br/informacoes/est-termo/CZ-down.asp"
req = POST(
url = url,
encode = "form",
body = list(
Idioma = "PT",
Dt_ref = "02/08/2018",
saida = "xml"
)
)
doc = xmlParseString(content(req, as = "text"))
root = xmlRoot(doc)
params = xmlElementsByTagName(root, "PARAMETRO", recursive = T)
root
root = xmlRoot(doc)[1]
params = xmlElementsByTagName(root, "PARAMETRO", recursive = T)
root = xmlRoot(doc)
params = xmlElementsByTagName(root, "PARAMETRO", recursive = T)
doc = xmlParseString(content(req, as = "text", encoding = "UTF-8"))
root = xmlRoot(doc)
params = xmlElementsByTagName(root, "PARAMETRO", recursive = T)
txt = content(req, as = "text", encoding = "UTF-8")
doc = xmlParseString(txt)
root = xmlRoot(doc)
xmlChildren(root)
xmlChildren(xmlChildren(root))
print(as.numeric("0.5"))
as.numeric("0.5") + 5
# POST XML
xml.in = paste0(
"  <parametros>",
"    <name>", name, "</name>",
"    <date>", format(dt, "%Y-%m-%d"), "</date>",
"  </parametros>"
)
source('D:/Projetos/financial-databases-training/Aulas/ServidorWS.R')
library(httr)
library(jsonlite)
library(XML)
#####################################################
# EXEMPLO XML
name = "juros"
dt = as.Date("2018-07-15")
# POST XML
xml.in = paste0(
"  <parametros>",
"    <name>", name, "</name>",
"    <date>", format(dt, "%Y-%m-%d"), "</date>",
"  </parametros>"
)
r = POST(
url = "http://localhost:9455/movimentos/XML",
body = xml.in
)
txt = content(r, as = "text")
print(txt)
xml.out = xmlParseString(txt)
dados = xmlToDataFrame(xml.out, stringsAsFactors = F)
dados$id = as.integer(dados$id)
dados$quantidade = as.integer(dados$quantidade)
dados$data = as.Date(dados$data, "%Y-%m-%d")
print(dados)
xml.in
xml.out
?POST
str(dados)
?fromJSON
xmlGetValor = function(idSerie, data) {
stopifnot(
is.integer(numeric),
length(id) == 1,
is(data, "Date"),
length(data) == 1
)
paste0(
'<?xml version=\"1.0\"?>',
'<SOAP-ENV:ENVELOPE xmins:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelpe/\" xmlns:xsi=\"http://www.w3.or/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.or/2001/XMLSchema\" SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">',
'<SOAP-ENV:Body>',
'<getValor xmlns="http://publico.ws.casosdeuso.sgs.pec.bcb.gov.br\">',
'<in1 xsi:type=\"xsd:long\">', idSerie, '</in1>',
'<in2 xsi:type=\"xsd:string\">', format(data, "%d/%m/%Y"), '</in2>',
'</getValor>',
'</SOAP-ENV:Body>',
'</SOAP-ENV:ENVELOPE>'
)
}
source('~/.active-rstudio-document')
xmlGetValor(24363L, Sys.Date())
source('~/.active-rstudio-document')
xmlGetValor(24363L, Sys.Date())
source('~/.active-rstudio-document')
xmlGetValor(24363L, Sys.Date())
id = 24363L
data = Sys.Date() - 1
req = POST(
url = "https://www3.bcb.gov.br/wssgs/services/FachadaWSSGS",
body = xmlGetValor(id, data)
)
View(req)
req = POST(
url = "https://www3.bcb.gov.br/wssgs/services/FachadaWSSGS",
add_headers(
SOAPAction = "http://publico.ws.casosdeuso.sgs.pec.bcb.gov.br#getValor"
),
body = xmlGetValor(id, data)
)
View(req)
req = POST(
url = "https://www3.bcb.gov.br/wssgs/services/FachadaWSSGS",
add_headers(
SOAPAction = "\"http://publico.ws.casosdeuso.sgs.pec.bcb.gov.br#getValor\""
),
body = xmlGetValor(id, data)
)
View(req)
source('~/.active-rstudio-document')
req = POST(
url = "https://www3.bcb.gov.br/wssgs/services/FachadaWSSGS",
add_headers(
SOAPAction = "\"http://publico.ws.casosdeuso.sgs.pec.bcb.gov.br#getValor\""
),
body = xmlGetValor(id, data)
)
View(req)
data = "2018-01-01"
req = POST(
url = "https://www3.bcb.gov.br/wssgs/services/FachadaWSSGS",
add_headers(
SOAPAction = "\"http://publico.ws.casosdeuso.sgs.pec.bcb.gov.br#getValor\""
),
body = xmlGetValor(id, data)
)
data = as.Date("2018-01-01")
req = POST(
url = "https://www3.bcb.gov.br/wssgs/services/FachadaWSSGS",
add_headers(
SOAPAction = "\"http://publico.ws.casosdeuso.sgs.pec.bcb.gov.br#getValor\""
),
body = xmlGetValor(id, data)
)
View(req)
source('~/.active-rstudio-document')
req = POST(
url = "https://www3.bcb.gov.br/wssgs/services/FachadaWSSGS",
add_headers(
SOAPAction = "\"http://publico.ws.casosdeuso.sgs.pec.bcb.gov.br#getValor\""
),
body = xmlGetValor(id, data)
)
View(req)
library(httr)
xmlGetValor = function(idSerie, data) {
stopifnot(
is.integer(idSerie),
length(idSerie) == 1,
is(data, "Date"),
length(data) == 1
)
return(paste0(
'<?xml version=\"1.0\"?>',
'<SOAP-ENV:ENVELOPE xmins:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelpe/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">',
'<SOAP-ENV:Body>',
'<getValor xmlns="http://publico.ws.casosdeuso.sgs.pec.bcb.gov.br\">',
'<in1 xsi:type=\"xsd:long\">', idSerie, '</in1>',
'<in2 xsi:type=\"xsd:string\">', format(data, "%d/%m/%Y"), '</in2>',
'</getValor>',
'</SOAP-ENV:Body>',
'</SOAP-ENV:ENVELOPE>'
))
}
id = 24363L
data = as.Date("2018-01-01")
req = POST(
url = "https://www3.bcb.gov.br/wssgs/services/FachadaWSSGS",
add_headers(
SOAPAction = "\"http://publico.ws.casosdeuso.sgs.pec.bcb.gov.br#getValor\""
),
body = xmlGetValor(id, data)
)
View(req)
library(httr)
xmlGetValor = function(idSerie, data) {
stopifnot(
is.integer(idSerie),
length(idSerie) == 1,
is(data, "Date"),
length(data) == 1
)
return(paste0(
'<?xml version=\"1.0\"?>',
'<SOAP-ENV:Envelope xmins:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelpe/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">',
'<SOAP-ENV:Body>',
'<getValor xmlns="http://publico.ws.casosdeuso.sgs.pec.bcb.gov.br\">',
'<in1 xsi:type=\"xsd:long\">', idSerie, '</in1>',
'<in2 xsi:type=\"xsd:string\">', format(data, "%d/%m/%Y"), '</in2>',
'</getValor>',
'</SOAP-ENV:Body>',
'</SOAP-ENV:Envelope>'
))
}
id = 24363L
data = as.Date("2018-01-01")
req = POST(
url = "https://www3.bcb.gov.br/wssgs/services/FachadaWSSGS",
add_headers(
SOAPAction = "\"http://publico.ws.casosdeuso.sgs.pec.bcb.gov.br#getValor\""
),
body = xmlGetValor(id, data)
)
View(req)
source('~/.active-rstudio-document')
library(httr)
xmlGetValor = function(idSerie, data) {
stopifnot(
is.integer(idSerie),
length(idSerie) == 1,
is(data, "Date"),
length(data) == 1
)
return(paste0(
'<?xml version=\"1.0\"?>',
'<SOAP-ENV:Envelope xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">',
'<SOAP-ENV:Body>',
'<getValor xmlns="http://publico.ws.casosdeuso.sgs.pec.bcb.gov.br\">',
'<in1 xsi:type=\"xsd:long\">', idSerie, '</in1>',
'<in2 xsi:type=\"xsd:string\">', format(data, "%d/%m/%Y"), '</in2>',
'</getValor>',
'</SOAP-ENV:Body>',
'</SOAP-ENV:Envelope>'
))
}
id = 24363L
data = as.Date("2018-01-01")
req = POST(
url = "https://www3.bcb.gov.br/wssgs/services/FachadaWSSGS",
add_headers(
SOAPAction = "\"http://publico.ws.casosdeuso.sgs.pec.bcb.gov.br#getValor\""
),
body = xmlGetValor(id, data)
)
View(req)
library(XML)
doc = xmlParseString(txt)
txt = content(r, as = "text")
doc = xmlParseString(txt)
txt = content(r, as = "text")
txt = content(req, as = "text")
doc = xmlParseString(txt)
library(httr)
library(XML)
xmlGetValor = function(idSerie, data) {
stopifnot(
is.integer(idSerie),
length(idSerie) == 1,
is(data, "Date"),
length(data) == 1
)
return(paste0(
'<?xml version=\"1.0\"?>',
'<SOAP-ENV:Envelope xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">',
'<SOAP-ENV:Body>',
'<getValor xmlns="http://publico.ws.casosdeuso.sgs.pec.bcb.gov.br\">',
'<in1 xsi:type=\"xsd:long\">', idSerie, '</in1>',
'<in2 xsi:type=\"xsd:string\">', format(data, "%d/%m/%Y"), '</in2>',
'</getValor>',
'</SOAP-ENV:Body>',
'</SOAP-ENV:Envelope>'
))
}
id = 24363L
data = as.Date("2018-01-01")
req = POST(
url = "https://www3.bcb.gov.br/wssgs/services/FachadaWSSGS",
add_headers(
SOAPAction = "\"http://publico.ws.casosdeuso.sgs.pec.bcb.gov.br#getValor\""
),
body = xmlGetValor(id, data)
)
doc = xmlParse(rawToChar(req$content), asText = T)
root = xmlRoot(doc)
xmlElementsByTagName(root, "multiref")
xmlElementsByTagName(root, "multiref", recursive = T)
node = xmlElementsByTagName(root, "multiref", recursive = T)[[1]]
node = xmlElementsByTagName(root, "multiRef", recursive = T)[[1]]
as.numeric(xmlValue(node))
source('D:/Projetos/financial-databases-training/Práticas/SGS_Bacen.R')
lerBacen(id, data)
source('D:/Projetos/financial-databases-training/Práticas/SGS_Bacen.R')
lerBacen(id, data)
source('D:/Projetos/financial-databases-training/Práticas/SGS_Bacen.R')
lerBacen(12L, data)
lerBacen(4391L, data)
tweets = read.csv("Dados/tweets.csv", stringsAsFactors = F)
# GREPL: retorna vetor logical (TRUE/FALSE)
# indicando se determinada string casou com o padrao
v = c("cama", "carro", "porta", "casa")
grepl(pattern = "ca.a", x = v)
View(tweets[grepl("^Sun", tweets$date),])             # no domingo
View(tweets[grepl("(\\d{2}):\\1:\\1", tweets$date),]) # p.ex: 23:23:23
?count
?nlines
length(tweets[grepl("^Sun", tweets$date),])
View(tweets[grepl("^Sun", tweets$date),])             # no domingo
countLines(tweets[grepl("^Sun", tweets$date),])
nrow(tweets[grepl("^Sun", tweets$date),])
View(tweets[grepl("00:00:", tweets$date),])           # meia noite
View(tweets[grepl("12:34:", tweets$date),])           # meia noite
View(tweets[grepl("^[Jj]ohn", tweets$user),])         # usuario john
library(stringr)
tweets = read.csv("Dados/tweets.csv", stringsAsFactors = F)
words = str_extract(tweets$text, "@\\w+")
head(words)
hashtags = str_extract(tweets$text, "#\\w+")
?str_extract
view(hashtags)
view(hashtags)
hashtags
library(dplyr)
install.packages("dplyr")
library(dplyr)
hashtags = drop_na(str_extract(tweets$text, "#\\w+"))
str(hashtags)
hashtags = dplyr::drop_na(str_extract(tweets$text, "#\\w+"))
drop_na()
library(tidyr)
install.packages("tidyr")
library(tidyr)
hashtags = drop_na(str_extract(tweets$text, "#\\w+"))
hashtags = dplyr::drop_na(as.data.frame(str_extract(tweets$text, "#\\w+")))
hashtags = drop_na(as.data.frame(str_extract(tweets$text, "#\\w+")))
View(hashtags)
summary(hashtags)
?hist()
hist(hashtags)
count(hashtags)
frequency(hashtags)
factor(hashtags)
hashtags = drop_na(as.data.frame(table(str_extract(tweets$text, "#\\w+"))))
hashtags
order(hashtags)
order(hashtags$Freq)
hashtags
sort(hashtags)
sort(hashtags$Freq)
sort(hashtags$Freq, decreasing = T)
hashtags[order(hashtags$Freq)]
hashtags[order(hashtags)]
hashtags = hashtags[order(hashtags$Freq)]
hashtags = hashtags[order(hashtags$Freq),]
hashtags
hashtags = hashtags[order(hashtags$-Freq),]
hashtags = hashtags[order(-hashtags$Freq),]
hashtags
topHashtags = hashtags[,5]
topHashtags = head(hashtags, 5)
hist(topHashtags)
hist(topHashtags$Freq)
topHashtags
view(tweets[grepl("#\\w+", tweets$text),])
View(tweets[grepl("#\\w+", tweets$text),])
tweetsComHashtag = view(tweets[grepl("#\\w+", tweets$text),])
library(stringr)
strings = c("10 e 20", "30", "40 ou 50", "60")
pattern = "\\d+"
m = str_extract_all(str_flatten(strings, ","), pattern)[[1]]
m
m = str_extract_all(str_flatten(strings, "\n"), pattern)[[1]]
m
str_match_all(str_flatten(strings, "\n"), pattern)[[1]]
